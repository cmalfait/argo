package main

import (
	"context"
	"fmt"

//	"io"
	//	"time"
	//	"log"
	//	"os"
	//	"path"

	"github.com/oracle/oci-go-sdk/v27/common"
	"github.com/oracle/oci-go-sdk/v27/example/helpers"
	"github.com/oracle/oci-go-sdk/v27/objectstorage"
	//	"github.com/oracle/oci-go-sdk/v27/objectstorage/transfer"
	//	"github.com/oracle/oci-go-sdk/v27/identity"
)

//func getNamespace(ctx context.Context, c objectstorage.ObjectStorageClient) string {
func getNamespace(ctx context.Context, c objectstorage.ObjectStorageClient) string {
	request := objectstorage.GetNamespaceRequest{}
	r, _ := c.GetNamespace(ctx, request)
	fmt.Println()
	fmt.Print("Namespace: ")
	return *r.Value
}

// ArtifactDriver structure
type ArtifactDriver struct {
	Endpoint  string
	AccessKey string
	SecretKey string
}

func createBucket(ctx context.Context, c objectstorage.ObjectStorageClient, namespace, name string) {
	compartmentID := "ocid1.compartment.oc1..aaaaaaaaidx64b2wndiympj27i3a25riynkbpleenxu56yyjlef3joehboxa"
	var pcompartmentID *string /* pointer variable declaration */
	pcompartmentID = &compartmentID

	request := objectstorage.CreateBucketRequest{
		NamespaceName: &namespace,
	}
//	request.CompartmentId = helpers.CompartmentID()
	request.CompartmentId = pcompartmentID
	request.Name = &name
	request.Metadata = make(map[string]string)
	request.PublicAccessType = objectstorage.CreateBucketDetailsPublicAccessTypeNopublicaccess
	_, err := c.CreateBucket(ctx, request)
	helpers.FatalIfError(err)

	fmt.Println("create bucket")
}

func deleteBucket(ctx context.Context, c objectstorage.ObjectStorageClient, namespace, name string) (err error) {
//func deleteBucket(ctx context.Context, c objectstorage.ObjectStorageClient, namespace, name string) {
	request := objectstorage.DeleteBucketRequest{
		NamespaceName: &namespace,
		BucketName:    &name,
	}
	_, err = c.DeleteBucket(ctx, request)
	helpers.FatalIfError(err)

	fmt.Println("delete bucket")
	return
}

//func (ociDriver *ArtifactDriver) newOCIClient() (objectstorage.ObjectStorageClient) {
func newOCIClient() (context.Context, objectstorage.ObjectStorageClient) {
	client, _ := objectstorage.NewObjectStorageClientWithConfigurationProvider(common.DefaultConfigProvider())
	ctx := context.Background()

	return ctx, client
}

func main() {
	ctx, client := newOCIClient()
	mynamespace := getNamespace(ctx, client)
	fmt.Println(mynamespace)

//	createBucket(ctx, client, mynamespace, "testbbucket")
	deleteBucket(ctx, client, mynamespace, "testbbucket")

	fmt.Println()
	return
}
